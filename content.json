{"meta":{"title":"Lemon's Blog","subtitle":null,"description":null,"author":"Lemon","url":"http://Lemon23.github.io"},"pages":[],"posts":[{"title":"排序算法之堆排序","slug":"排序算法之堆排序","date":"2017-01-12T03:54:16.000Z","updated":"2017-01-13T02:52:08.000Z","comments":true,"path":"2017/01/12/排序算法之堆排序/","link":"","permalink":"http://Lemon23.github.io/2017/01/12/排序算法之堆排序/","excerpt":"堆排序是集归并排序和插入排序有点的一种排序算法，它与插入排序一样具有空间原址性，并且与归并排序一样，堆排序的时间复杂度是 O(nlgn)。","text":"堆排序是集归并排序和插入排序有点的一种排序算法，它与插入排序一样具有空间原址性，并且与归并排序一样，堆排序的时间复杂度是 O(nlgn)。 堆排序堆排序使用了一种称为”堆”的数据结构来进行排序。所以想学习堆排序，先要了解”堆”的概念。堆不仅仅应用在堆排序中，它还可以构造一种有效的优先队列。 堆堆，一个可以被看作一棵近似的完全二叉树的数组对象。树上的每个结点对应数组中的一个元素，元素从左向右填充。根结点为数组最大值时称为最大堆，根结点为最小值时称为最小堆。而不论是最大堆或最小堆，结点值都要满足堆的性质，也就是某个结点值总是不大于或不小于其父结点的值。 树的根结点是数组下标 0 的元素，也就是 A[0] ，如果我给定一个结点下标 i，很容易的可以计算得出它的父结点和左右子结点的下标。也就是： Parent = i/2 （结果向下取整）Left = 2i + 1Right = 2i + 2 规则从无序的输入数组中构造一个最大堆；对数组进行原址排序，维护最大堆的性质，最大值元素在根结点中；已经构建好的最大堆，通过互换 A[0] 与 A[n] 的位置，从堆中去掉最大元素，使其在正确的位置；此时重新维护最大堆的性质，并重复交换步骤，直到数组从小到大排列好。 时间复杂度包含 n 个元素的堆的高度是 lgn，堆结构上的一些基本操作的运行时间至多与树的高度成正比，即时间复杂度为 O(lgn)。 优缺点 构建初始堆所需要的比较次数多，所以不适宜数据较少的排序 堆排序是原地排序，辅助空间为 O(1) 堆排序是不稳定的排序，也就是相同元素排序后的前后顺序会改变 算法实现js代码heap_sort.js123456789101112131415161718192021222324252627282930313233343536Array.prototype.buildMaxHeap = function () &#123; for(var i = Math.floor(this.length/2)-1; i &gt;=0; i--) &#123; this.maxHeapify(i, this.length); &#125;;&#125;;Array.prototype.exchange = function (i, j) &#123; var tmp = this[i]; this[i] = this[j]; this[j] = tmp;&#125;;Array.prototype.heapSort = function () &#123; this.buildMaxHeap(); for(var i = this.length-1; i &gt; 0; i--) &#123; this.exchange(0, i); this.maxHeapify(0, i); &#125;; return this;&#125;;Array.prototype.maxHeapify = function (i, j) &#123; var largest = i; var left = 2 * i + 1; var right = 2 * i + 2; if(left &lt; j &amp;&amp; this[largest] &lt; this[left]) &#123; largest = left; &#125;; if(right &lt; j &amp;&amp; this[largest] &lt; this[right]) &#123; largest = right; &#125;; if(largest != i) &#123; this.exchange(i, largest); this.maxHeapify(largest, j); &#125;;&#125;; 分析我来分析一下堆排序的操作过程，看图： 堆排序首先要对数组构建初始”堆”，形态为 a 。接着从底层开始向上，维护最大堆的性质，如 b ，父结点 2 小于左子结点 3，所以交换两个结点位置。重复此步骤直至堆结构符合最大堆性质，形如 c。此时数组状态为：[8, 3, 6, 2, 0, 5] 然后开始进行堆排序，堆的根结点也就是数组中的最大元素，为了符合排序后的大小顺序，我们每次都把根结点与数组末尾元素进行互换，并重新进行维护最大堆性质。 无非是把最大堆转换成最小堆的过程。 参考文档 算法导论(原书第三版) 堆排序·源代码","categories":[{"name":"技术","slug":"技术","permalink":"http://Lemon23.github.io/categories/技术/"},{"name":"算法","slug":"技术/算法","permalink":"http://Lemon23.github.io/categories/技术/算法/"}],"tags":[{"name":"排序算法","slug":"排序算法","permalink":"http://Lemon23.github.io/tags/排序算法/"},{"name":"排序","slug":"排序","permalink":"http://Lemon23.github.io/tags/排序/"},{"name":"堆","slug":"堆","permalink":"http://Lemon23.github.io/tags/堆/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://Lemon23.github.io/categories/技术/"},{"name":"算法","slug":"技术/算法","permalink":"http://Lemon23.github.io/categories/技术/算法/"}]},{"title":"排序算法之归并排序","slug":"排序算法之归并排序","date":"2017-01-06T02:45:01.000Z","updated":"2017-01-12T03:55:54.000Z","comments":true,"path":"2017/01/06/排序算法之归并排序/","link":"","permalink":"http://Lemon23.github.io/2017/01/06/排序算法之归并排序/","excerpt":"归并排序（Merge-Sort），是使用了分治法的一个典型应用。将已有序的子数组合并，得到一个有序数列，即先递归地将它们分成两半分别排序，然后将结果合并起来。","text":"归并排序（Merge-Sort），是使用了分治法的一个典型应用。将已有序的子数组合并，得到一个有序数列，即先递归地将它们分成两半分别排序，然后将结果合并起来。 归并排序归并排序是分治法的一个典型应用，将问题分解成几个规模较小但类似于原问题的子问题，递归地求解这些子问题，然后在合并这些子问题的解来建立原问题的解。 实现归并的一种最直接的方法是将两个要归并的有序数组，归并到第三个数组中。所以它需要额外的空间来实现归并。 规则首先，申请空间，用来存放归并后的数组；然后，设定两个指针，指向待归并数组的起始位置；比较元素，选择较小的元素放入合并空间中，并将指针移到下一位置；依次比较，直到指针超出数组末尾，把余下的所有元素归并到合并序列的末尾。 时间复杂度归并排序对于任意长度为 N 的数组，排序所需时间和 NlogN成正比。比较操作的次数介于 NlgN／2 和 NlgN-N+1。赋值操作的次数是 2NlgN。空间复杂度为 O(n)。 优缺点 归并排序的空间复杂度不是最优的，他需要额外空间来存放已排序序列。 归并排序可以减少比较次数，剩余元素不进行比较也可将其数据排序。 归并排序是一种渐进最优的基于比较排序的算法，也就是说，在最坏情况下的比较次数和任意基于比较的排序算法所需的最少比较次数都是 NlgN。 算法实现js代码merge_sort.js12345678910111213141516171819202122function merge_sort(arr) &#123; if(arr.length == 1) &#123; return arr; &#125;; var middle = Math.floor(arr.length/2), left = arr.slice(0, middle), right = arr.slice(middle); return merge(merge_sort(left), merge_sort(right));&#125;;function merge(left, right) &#123; var result = []; while(left.length &gt; 0 &amp;&amp; right.length &gt; 0) &#123; if(left[0] &lt; right[0]) &#123; result.push(left.shift()); &#125; else &#123; result.push(right.shift()); &#125;; &#125;; return result.concat(left).concat(right);&#125;; 分析我们来看一下打印日志后的交换过程： 其实归并排序很好理解，运用分治思想，把一个数组先分成左右两个数组，再把左右两个数组分别再拆分成两个数组，直到左右两个数组只有一个元素。然后逐步依次比较归并，最后归并成一个完整的有序数组。 看下图更详细的展示归并排序的操作： 有一个很好的比喻来描述归并排序，就是假如桌子上放着两摞倒扣的扑克牌，这两摞扑克牌都是已经依序从上到下排列好的，那你要如何才能将两摞扑克牌合成有序的一副扑克牌呢？条件是每次只能拿起任意一摞扑克牌的最上面的一张。 很简单，我们把两摞扑克牌分别命名为 A 和 B，这样方便讲解。分别翻开两摞拍的第一张 A1 和 B1，比较两个的大小，如果 A1 &lt; B1 则把 A1 倒扣放到一边。接下来拿起 A2 与 B1 做比较，如果 A2 &gt; B1 则把 B1 倒扣放到刚才放到一边的 A1 上面。重复这个过程，直到 A 或 B 任意一摞拿空，把剩下的拍依次倒扣放到已排好的那摞扑克牌上面。这样我们就把两摞扑克牌有序的合并为一摞了。 参考文档 图灵程序设计丛书–算法(第4版) 算法导论(原书第三版) 归并排序·源代码","categories":[{"name":"技术","slug":"技术","permalink":"http://Lemon23.github.io/categories/技术/"},{"name":"算法","slug":"技术/算法","permalink":"http://Lemon23.github.io/categories/技术/算法/"}],"tags":[{"name":"排序算法","slug":"排序算法","permalink":"http://Lemon23.github.io/tags/排序算法/"},{"name":"排序","slug":"排序","permalink":"http://Lemon23.github.io/tags/排序/"},{"name":"归并","slug":"归并","permalink":"http://Lemon23.github.io/tags/归并/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://Lemon23.github.io/categories/技术/"},{"name":"算法","slug":"技术/算法","permalink":"http://Lemon23.github.io/categories/技术/算法/"}]},{"title":"排序算法之希尔排序","slug":"排序算法之希尔排序","date":"2016-12-01T06:31:14.000Z","updated":"2016-12-02T03:02:14.000Z","comments":true,"path":"2016/12/01/排序算法之希尔排序/","link":"","permalink":"http://Lemon23.github.io/2016/12/01/排序算法之希尔排序/","excerpt":"希尔排序，是一种基于插入排序的快速的排序算法。希尔排序为了加快速度，交换不相邻的元素，以对数组的局部进行排序，并最终用插入排序将局部有序的数组排序。","text":"希尔排序，是一种基于插入排序的快速的排序算法。希尔排序为了加快速度，交换不相邻的元素，以对数组的局部进行排序，并最终用插入排序将局部有序的数组排序。 希尔排序希尔排序的中心思想是：使数组中任意间隔为 f 的元素都是有序的。 规则先将要排序的一组数按某个增量 f 分成若干组，每组中记录下标相差 f；对每组中全部元素进行排序，然后用一个较小的增量对它进行上述步骤，在每组中再进行排序；直到增量为 1 时，即所有要排序的数分成一组。 一般的，初次取序列长度的一半为增量，以后每次减半，直到增量为 1。 时间复杂度希尔排序的时间复杂度与增量序列的选取有关，目前已知它的运行时间达不到平方级别，在最坏的情况下希尔排序的比较次数和 N^(3/2) 成正比。平均每个增幅所带来的比较次数约为 N^(1/5)，但只有在 N 很大的时候这个增幅才会变的明显。 希尔排序的时间复杂度的下界是 n*log2n。希尔排序对中等大小规模的数组表现良好，在最坏情况下和平均情况下执行效率差不多。 希尔排序是按照不同步长对元素进行插入排序，当刚开始元素很无序的时候，步长最大，所以插入排序的元素个数很少，速度很快；当元素基本有序了，步长很小，插入排序对于有序的序列效率很高。所以，希尔排序的时间复杂度会比o(n^2)好一些。 优缺点 希尔排序的执行时间依赖于增量序列。 希尔排序更高效的原因是它权衡了自数组的规模和有序性。在开始各个数组都很短，排序后数组都是部分有序的，这种情况很适合插入排序。自数组部分有序的成都取决于递增序列的选择。 代码量小且不需额外的内存空间。 如果你需要解决一个排序问题和没有系统排序函数可用，可以先用希尔排序，在考虑是否需要替换为更复杂的排序算法。 算法实现js代码example.js123456789101112function shell_sort(arr) &#123; var len = arr.length; for(var f = Math.floor(len/2); f &gt; 0; f = Math.floor(f/2)) &#123; for(var i = f; i &lt; len; i++) &#123; for(var j = i-f; j &gt;= 0 &amp;&amp; arr[j] &gt; arr[f+j]; j -= f) &#123; var temp = arr[j]; arr[j] = arr[f+j]; arr[f+j] = temp; &#125;; &#125;; &#125;;&#125;; 分析同样，我在上面的代码中加入几行 consloe 打印出在循环中各个参数的值和数组状态： 我在函数中声明了一组有 5 个元素的数组，接下来看下图的打印结果，可以更好的理解希尔排序的交换过程： 想弄懂希尔排序到底是怎么一步步交换元素的，我自己手动把数组带入执行了一遍函数。中间失败了好几次，- -因为循环嵌套是在太多了，导致我转着转着就蒙圈了。我觉得这个办法虽然笨，但是对于理解一个函数的运作是最直接不过的了。 整体的交换过程为：2 -&gt; 4 [2,7,4,9,0]0 -&gt; 4 [2,7,0,9,4]0 -&gt; 2 [0,7,2,9,4]第一轮结束，增量为17 -&gt; 2 [0,2,7,9,4]9 -&gt; 4 [0,2,7,4,9]7 -&gt; 4 [0,2,4,7,9]第二轮结束，增量为0 这里我就不把带入过程写下来了，说一下希尔排序的大致思路吧： 首先，从上面所写的交换过程很容易找出规律，结合希尔排序的规则来看，此时的增量为 Math.floor(5/2)（向下取整5／2 = 2），所以我们可以看作是从数组 0 下标开始隔一个取一个，也就是[4,2,0]。 然后，把这三个元素按照大小互相交换位置，排序并不影响另外两个元素的位置，只在这三个元素的位置上互相交换，结果为[0,7,2,9,4]。 最后，开始下一轮循环，此时增量为 Math.floor(2/2)（向下取整2／2 = 1）。这时增量为1，也就是数组元素挨个比较并排序，就跟用插入排序的排序规则是一样的了。 也就是说，希尔排序会先把相隔增量的元素用插入排序的规则排好位置，然后再把相隔增量/2的元素用插入排序排好位置，这样直到增量为1，就把元素挨个用插入排序检查大小并排序。 现在你应该可以理解，为什么希尔排序可以把位于数组末尾的最小值很快的移动到数组前面了，因为它比插入排序的检查和移动间隔大，当然执行速度也就越快。相当于我们传给插入排序一个相对有序的数组，当然运行更快了。 比较希尔排序和插入排序为了证实青出于蓝而胜于蓝的希尔排序，跟以前一样，我测试了一下两种算法的运行时间。分别对两种算法生成100位随机数数组，然后进行排序，看运行时间。（测试运行时间的代码可以到我的Github上找，地址我会写在参考文档中） 结果： 看上图，我生成了 10000 组随机数组，可以看出，希尔排序的运行时间是比插入排序快的。这个测试只针对随机数组，有兴趣的可以尝试传入正序或倒序数组再进行测试，看看结果是否一样。 参考文档 图灵程序设计丛书–算法(第4版) 希尔排序·源代码 比较插入排序和希尔排序的运行时间·源代码","categories":[{"name":"技术","slug":"技术","permalink":"http://Lemon23.github.io/categories/技术/"},{"name":"算法","slug":"技术/算法","permalink":"http://Lemon23.github.io/categories/技术/算法/"}],"tags":[{"name":"排序","slug":"排序","permalink":"http://Lemon23.github.io/tags/排序/"},{"name":"初级算法","slug":"初级算法","permalink":"http://Lemon23.github.io/tags/初级算法/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://Lemon23.github.io/categories/技术/"},{"name":"算法","slug":"技术/算法","permalink":"http://Lemon23.github.io/categories/技术/算法/"}]},{"title":"排序算法之插入排序","slug":"排序算法之插入排序","date":"2016-11-28T07:03:11.000Z","updated":"2016-12-01T07:58:50.000Z","comments":true,"path":"2016/11/28/排序算法之插入排序/","link":"","permalink":"http://Lemon23.github.io/2016/11/28/排序算法之插入排序/","excerpt":"插入排序同样是排序算法，它和上一篇所说的”选择排序”到底有什么区别呢？又该在什么情况下使用插入排序呢？带着疑问开始学习，在学习中尝试解答，我觉得这是一个好的学习方法。(^-^)","text":"插入排序同样是排序算法，它和上一篇所说的”选择排序”到底有什么区别呢？又该在什么情况下使用插入排序呢？带着疑问开始学习，在学习中尝试解答，我觉得这是一个好的学习方法。(^-^) 插入排序插入排序，顾名思义是将元素插入到有序数组中的适当位置中。 规则将 N 个元素的数列分为已有序和无序两个部分；每次处理将无序数列的第一个元素与有序数列的元素从后往前逐个比较；插入适当位置。 时间复杂度对于随机排列的长度为 N 且值不重复的数组，最坏情况下（降序排列）需要 N^2/2 次比较和 N^2/2 次交换；最好情况（已经是升序排列）需要 N-1 次比较和 0 次交换。 平均来说，插入排序的时间复杂度为 O(n^2)。 优缺点 所需的时间取决于数组元素的初始顺序。当用插入排序排列一组有序数组或所有元素值相同的数组时，插入排序能够立即发现每个元素都已经在合适的位置上，它的运行时间是线性的。 稳定性。插入排序是在一个已经有序的小序列的基础上，一次插入一个元素。当刚开始时只有一个元素，即第一个元素。比较是从有序序列的末尾开始的，要插入的元素和有序列表的最大数开始比起，如果比它大则插入其后面，否则一直往前找到适当的位置插入。如果元素相等，那么要插入的元素会放在相等元素后面，所以相等元素的前后顺序是没有改变的。 算法实现js代码example.js1234567891011121314function insert_sort(arr) &#123; var temp, i, j; for (i = 0; i &lt; arr.length; i++)&#123; temp = arr[i]; j = i - 1; while((j &gt;= 0) &amp;&amp; (arr[j] &gt; temp)) &#123; arr[j+1] = arr[j]; j--; &#125;; if (j != i-1) &#123; arr[j+1] = temp; &#125;; &#125;;&#125;; 分析我给insert_sort()函数增加几行 console 打印出在循环内各个参数值和数组的变化，这样可以更直观的了解到函数是如何一步步给数组排序的。 接着来看一下函数到底打印的结果： 我来一步步的解析insert_sort()函数的排序过程，当中究竟发生了什么： 我给出了数组arr=[4,2,9,5,2]，共 5 个元素的数组，所以总的外循环次数也应为 5 次。对于 0 到 N-1 之间的每个 i ，将 a[i] 与 a[0] 到 a[i-1]中比它小的所有元素依次有序地交换，i 左侧的元素总是有序的。 第一轮循环 我们对照着上面的函数来看，进入for循环时，i = 0，temp = 4，j = -1；然后到达while循环处进行判断：-1 &gt;= 0 就已经不成立了，所以直接跳过while循环；接下来到达if判断处：-1 != -1 也不成立，跳过if直接输出 “4—“。这一步的作用就是把数组第一个元素插入到有序数组中，因为刚开始插入，有序数组并没有值，所以直接把无序数组第一元素插入就好，并不用判断大小。至此，数组为：[4,2,9,5,2] 第二轮循环 此时，i = 1，temp = 2，j = 0；到达while循环判断：0 &gt;= 0 和 4 &gt; 2 成立，进入while循环执行：2 = 4, j = -1，到此 j 已经不符合while循环的判断，所以不再继续循环；然后是if判断：-1 != 0 成立，执行：4 = 2；结束，输出 “4—“，这一步把无序数组的第一个元素 2 与 有序数组的最后一个元素 4 作比较，2 &lt; 4 ，所以在内循环中把 4 向右移动一位，又在if中把 2 插入到有序数组的第一位置。至此， 数组为：[2,4,9,5,2] 第三轮循环 此时，i = 2, temp = 9, j = 1；来到while循环进行判断：1 &gt;= 0 和 4 &gt; 9，显然第二个表达式并不成立，所以跳过while循环；接着是if判断：1 != 1 也不成立，跳过，直接输出 “4—“。这一步取出无序数组的第一元素 9 ，与有序列表的最后一个元素 4 比较，4 &lt; 9，所以直接把 9 放到 4 的后面位置即可。至此，数组为：[2,4,9,5,2] 第四轮循环 此时，i = 3, temp = 5, j = 2；到了while循环判断：2 &gt;= 0 和 9 &gt; 5 成立，执行：5 = 9，j = 1；继续while判断：1 &gt;= 0 和 4 &gt; 5，第二表达式不成立，不再继续while循环；直接到if判断：1 ！= 2 成立，执行：9 = 5；这一步把无序数组第一元素 5 和有序数组 9 作比较，5 &lt; 9 所以元素 9 向右移动一位，又判断了 5 &lt; 4 但不成立，所以元素 5 就插入到 9 之前的位置。至此，数组为：[2,4,5,9,2] 第五轮循环 此时，i = 4，temp = 2, j = 3;又进行while循环判断：3 &gt;= 0 和 9 &gt; 2 成立，执行：2 = 9, j = 2;继续while判断：2 &gt;= 0 和 5 &gt; 2 成立，执行：9 = 5, j = 1;继续while判断：1 &gt;= 0 和 4 &gt; 2 成立，执行：5 = 4, j = 0;继续while判断：0 &gt;= 0 和 2 &gt; 2 第二表达式不成立，跳出while循环；接着是if判断：0 != 3 成立，执行：4 = 2;这一步无序数组只剩下 2 ，它依次与有序数组的 9、5、4、2比较，最终插入到 4 的前面，元素 4、5、9 都依次向右移动了一位。最终，数组为：[2,2,4,5,9] 自己把数组带入函数内，一步步的记下各个事态会让整个思路都清晰的，也能更清楚参数的变化和数组元素的移动。所以我每次都会用一个很短的数组自己手动执行一次函数，写出每时每刻的值，这样可以更好的让算法带领你一步步的移动元素、排列数组。 比较插入排序和选择排序同样是排序算法，那么到底哪种排序算法更快呢？ 选择排序无论数组是正序还是倒序排列，都要整体扫描一遍数组，而插入排序可以很快发现数字是否已在合适位置上。那么理论上插入排序应该比选择排序快，到底这个理论正不正确，我需要通过实践来验证它： 我写了两个验证函数——t1()和t2()。（验证函数源代码地址写在最后的参考文档中）这两个函数的作用都是根据传入参数 count，生成 count 组由 0 到 10 随机生成的 10 位数数组，然后计算其开始时间到结束时间的差，并分别使用插入排序和选择排序排列随即数组，看看到底哪种算法更快。 结果： 上图中，我打印出了两种排序算法的运行时间，可以看出插入排序所用时间比选择排序快一点的。虽然我传入了 100000 ，也就是生成 100000 组随机数数组，但单位是毫秒，也就是两种算法平均有0.04秒的差距，实际肉眼可见差距并不大，如果我不打印出时间来是感觉不到的。 下面我更改一下两个函数，生成由 0 到 100 随机生成的 100 位数数组，这样工作量应该大了不少，我们再来看一下两个函数的运行时间： 这次我只实验了三组数据，因为已经明显感觉到等待的时间了。这次选择排序的运行时间最高达到了 11586 毫秒，也就是有 11秒5 的时间在是计算中。你可以自己数 11 秒种，就能体会运行时间有多长了。 当然，这只是基于随机数组进行的实验，有兴趣的可以基于正序、倒序、元素值相同的数组进行测试。 所以，结论是 在随机数数组中，插入排序比选择排序执行速度更快 。 参考文档 图灵程序设计丛书–算法(第4版) 插入排序·源代码 比较插入排序和选择排序的运行时间·源代码","categories":[{"name":"技术","slug":"技术","permalink":"http://Lemon23.github.io/categories/技术/"},{"name":"算法","slug":"技术/算法","permalink":"http://Lemon23.github.io/categories/技术/算法/"}],"tags":[{"name":"排序","slug":"排序","permalink":"http://Lemon23.github.io/tags/排序/"},{"name":"初级算法","slug":"初级算法","permalink":"http://Lemon23.github.io/tags/初级算法/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://Lemon23.github.io/categories/技术/"},{"name":"算法","slug":"技术/算法","permalink":"http://Lemon23.github.io/categories/技术/算法/"}]},{"title":"排序算法之选择排序","slug":"排序算法之选择排序","date":"2016-11-25T06:47:47.000Z","updated":"2016-12-01T07:59:02.000Z","comments":true,"path":"2016/11/25/排序算法之选择排序/","link":"","permalink":"http://Lemon23.github.io/2016/11/25/排序算法之选择排序/","excerpt":"算法是每一个程序员都应该了解的知识，正所谓：不会算法的程序员人生是不完整的。排序算法是算法界的基础了，并且在各种面试中被问到最多的算法题就是排序了，所以先来理解排序算法中初级的排序——选择排序。","text":"算法是每一个程序员都应该了解的知识，正所谓：不会算法的程序员人生是不完整的。排序算法是算法界的基础了，并且在各种面试中被问到最多的算法题就是排序了，所以先来理解排序算法中初级的排序——选择排序。 排序排序，就是将一组对象按照某种逻辑顺序重新排列的过程，其目的就是将一组”无序”的记录序列调整为”有序”的记录序列。 假定，在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变（即在排序前，a[i]=a[i+1]，排序后他们的位置是不变的），则称这种排序算法是稳定的，否则为不稳定排序。 排序算法分为很多种，常见的有：快速排序、希尔排序、堆排序、选择排序、插入排序和归并排序等… 选择排序一种极简单的排序算法。 规则首先，找到数组中最小的那个元素；其次，将它和数组的第一个元素交换位置；再次，在剩下的元素中找到最小的元素，将它与第二个元素交换位置；如此反复，直到将整个数组排序。 时间复杂度选择排序的内循环只是在比较当前元素与已知的最小元素（以及将当前索引加1和检查是否代码越界）。交换元素的代码写在内循环之外，每次交换都排定一个元素。 交换操作介于 0 和 (n-1) 次之间，比较操作为 n(n-1)/2 次，赋值操作介于 0 和 3(n-1) 次之间。 因此，比较次数 O(n^2)，交换的总次数是 O(n) ，算法的时间效率取决于比较的次数。 优缺点 运行时间和输入无关，为了找出最小的元素，它需要先整体扫描一遍数组，但这并不能为之后的迭代提供什么信息。所以如果有一组有序的数组或值全部相等的数组和一个无序数组所用的排序时间是一样长的。 数据移动少，每次交换都会改变两个数组元素的值，因此选择排序用了 N 次交换（交换次数和数组的大小是线性关系）。其他任何算法都是线性对数或平方级别。 算法实现js代码example.js123456789101112131415function sort(arr) &#123; var temp; var pos = 0; for (var i = 0; i &lt; arr.length-1; i++) &#123; pos = i; for (var j = i+1; j &lt; arr.length; j++) &#123; if (arr[j] &lt; arr[pos]) &#123; pos = j; &#125;; &#125;; temp = arr[i]; arr[i] = arr[pos]; arr[pos] = temp; &#125;;&#125;; 分析为了体现选择排序的实现过程，输出最终的由小到大的排序数组，我在上面的代码中加入了一些打印语句，方便我可以直观的看到sort()函数是如何遍历并且交换元素的。 可以看出，我打印出了每次参数的变化情况，接下来我们来看看在sort()函数内究竟发生了什么： 第一次循环会遍历整个数组，此时 i = 0，逐个比较元素后找到最小值，并把最小元素下标赋值给 pos，在执行到 st.6 时数组第 i 位置的元素和第 pos 位置的元素互相交换位置，也就是把最小值移到了数组第一位。 第二次循环 i = 1，此时遍历会排除数组第 i 位置左边的元素，也就是排除了第一位置的元素再开始遍历。比较其余数字后，同样把最小元素下标赋值给 pos，最后把数组第 i 位置元素和第 pos 位置元素互换位置，也就是把最小值移到了第二位。此时，因为数组中本身第二位置元素就是当前最小值了，所以在打印中看不出元素交换的痕迹，但是代码确实是执行了一次交换赋值，只不过是把第二位又移到了第二位。 第三次循环和第四次循环跟上面步骤一样。最后输出排列好的数组。 从上图就可以看出，选择排序的排序轨迹成对角线状，而无论下一元素是否已经按大小排列好，它都要遍历剩余元素做比对后交换位置。所以，如果你有一组已经排列好的数组，或排列变动并不大的数组，使用选择排序是很不划算的。 并且，选择排序是一种不稳定排序，它会打乱你数组中相同元素的位置。比如：[9,5,9,3,1]排序这个数组会先把第一元素’9’与最后一个元素’1’交换，这时本应在第三个元素的’9’就会排在它前面。当然，在视觉上是无所谓的，但是稳定排序就不会出现这样的问题。 参考文档 图灵程序设计丛书–算法(第4版) 选择排序·源代码","categories":[{"name":"技术","slug":"技术","permalink":"http://Lemon23.github.io/categories/技术/"},{"name":"算法","slug":"技术/算法","permalink":"http://Lemon23.github.io/categories/技术/算法/"}],"tags":[{"name":"排序","slug":"排序","permalink":"http://Lemon23.github.io/tags/排序/"},{"name":"初级算法","slug":"初级算法","permalink":"http://Lemon23.github.io/tags/初级算法/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://Lemon23.github.io/categories/技术/"},{"name":"算法","slug":"技术/算法","permalink":"http://Lemon23.github.io/categories/技术/算法/"}]},{"title":"Soft-Cat","slug":"Soft-Cat","date":"2016-11-02T05:04:03.000Z","updated":"2016-11-02T09:32:05.000Z","comments":true,"path":"2016/11/02/Soft-Cat/","link":"","permalink":"http://Lemon23.github.io/2016/11/02/Soft-Cat/","excerpt":"自主设计构建的一个”关爱流浪猫”官网的封面页。","text":"自主设计构建的一个”关爱流浪猫”官网的封面页。 我们先来看一下页面效果： 页面描述页面整体为 “现代 欧美 清新 简约” 的风格。 进入网站最夺人眼球的是网站中间用白色粗体的大字凸显出的网站主旨——“Soft Cat”，其次就是符合主题的背景图，我选用了一只躺在毛毯上的小猫，同时为背景作了半透明处理，为了用户能够看清白色的文字。 网站整体的颜色再搭配文字，给用户的第一感觉是简约又大方，而纯净的页面中那粉色的心形标志就更显得夺目，使用户会不由自主的把目光移到那里。 简单的页面就要搭配少量的文字，字多了排版也是问题，而且用户会产生反感，不想去阅读和浏览。我通过文字的大小粗细进行排版，使用户能很快的分清楚文字的布局，从少量的文字中明白这个网站是干什么的！ 现在我分解展示一下这个网站的各个部分： LOGO网站Logo我用了我自己的名字，并没有加入图片，因为这个字体已经很好看了。一个页面的Logo是很重要的，它是网站的门面，也是别人能否记住你是谁的决定性因素！这里我使用了Pacifico字体，并且在字母间作了间隔，目的是可以让用户更清楚的看到每个字母并记住它。index.css123font-family: Pacifico, Snell Roundhand;font-weight: 500;letter-spacing: 3px; Nav 网站导航也是很重要的，要让用户能够看明白导航可以带他去到哪里，和我身处什么位置。相对于这种简洁的页面，导航需要至少两种状态：鼠标移上和点击后。 下面是这两种状态的样式效果： 页面层次多的最好使用”面包屑”导航，或者在这个基础上构建二级导航，给用户一个好的浏览体验。 主体这个部分是网站的精髓所在，你要告诉用户，这是关于什么的网站？可以干什么？它包括了网站的主旨、标语、关爱语和心型按钮： 在样式中，我使用了flex布局，可以响应各种尺寸的屏幕，用过一次就爱上了它。页面中的文字可以根据实际情况做更改，样式布局也可以随心所欲，重点是在没有使用边框的时候，你应该能让用户区分出文字的排版。 在页面中我添加了一个小动效，使网站使用起来不枯燥。就是粉色的心型按钮，点击后会3D旋转三圈，然后提示用户”Thank for you”。无论在使用中它的作用是筹款，还是点赞，我只是无聊添加个小玩意。可以看源代码，其实只有6行。 源文件文件地址：Github-Lemon23/Pages/Soft Cat 如果你喜欢这个页面的话，给个赞吧！","categories":[{"name":"设计","slug":"设计","permalink":"http://Lemon23.github.io/categories/设计/"},{"name":"网页构建","slug":"设计/网页构建","permalink":"http://Lemon23.github.io/categories/设计/网页构建/"}],"tags":[{"name":"欧美","slug":"欧美","permalink":"http://Lemon23.github.io/tags/欧美/"},{"name":"清新","slug":"清新","permalink":"http://Lemon23.github.io/tags/清新/"},{"name":"简约","slug":"简约","permalink":"http://Lemon23.github.io/tags/简约/"},{"name":"动物","slug":"动物","permalink":"http://Lemon23.github.io/tags/动物/"},{"name":"封面页","slug":"封面页","permalink":"http://Lemon23.github.io/tags/封面页/"}],"keywords":[{"name":"设计","slug":"设计","permalink":"http://Lemon23.github.io/categories/设计/"},{"name":"网页构建","slug":"设计/网页构建","permalink":"http://Lemon23.github.io/categories/设计/网页构建/"}]},{"title":"Vue关于data数据的深度响应原理","slug":"Vue关于data数据的深度响应原理","date":"2016-10-26T03:48:25.000Z","updated":"2016-10-26T07:41:58.000Z","comments":true,"path":"2016/10/26/Vue关于data数据的深度响应原理/","link":"","permalink":"http://Lemon23.github.io/2016/10/26/Vue关于data数据的深度响应原理/","excerpt":"前些日子在写Vue的时候遇到了一个问题，虽然最后修改好了。但是浅尝辄止不是我的性格。所以在工作之余，自己找寻了一下问题的原因，顺便研究了一下Vue的深度响应原理。","text":"前些日子在写Vue的时候遇到了一个问题，虽然最后修改好了。但是浅尝辄止不是我的性格。所以在工作之余，自己找寻了一下问题的原因，顺便研究了一下Vue的深度响应原理。 发现问题并产生疑问问题描述任务需求：创建一个用户填写信息的表单页面，用户需要输入身份信息、手机号和验证码等。 出现问题：页面已经写好了，可是在表单中使用v-model时出现了问题。应该响应用户输入的表单却不随着输入更新数据，导致提交时的表单信息没有更新。 代码分析在每个表单中都引用相应的v-model值，并在用户点击提交后，存放在cookie里，用户需要重复输入的时候读取cookie中已有的值，可以避免用户重复输入信息。1234567&lt;input type=\"tel\" placeholder=\"请输入您的手机号\" v-model=\"order.mobile\" /&gt;&lt;input type=\"number\" placeholder=\"请输入验证码\" v-model=\"order.verify_code\" /&gt;&lt;input type=\"text\" placeholder=\"请输入您的姓名\" v-model=\"order.real_name\" /&gt; . . .&lt;input type=\"text\" placeholder=\"请输入详细地址\" v-model=\"order.add_detail\"/&gt;表单代码如上，表单信息存在名为order的数据中，用户点击提交按钮后，把order存储在cookie中。现在展示vue的代码部分：1234567891011121314151617181920&lt;script&gt; data()&#123; return &#123; order:&#123;&#125; &#125; &#125;, methods: &#123; reload() &#123; this.order = getCookie('order') if(!this.order) this.order = &#123;&#125; this.order.verify_code = '' ... &#125; &#125;, route: &#123; data() &#123; this.reload() &#125; &#125;&lt;/script&gt;意思是，从cookie中取出order数据，如果cookie中没有order数据，就创建一个空的order，把验证码这一数据置空。路由切换的时候就执行reload()函数。 大致思路是没有问题的，可是测试时order.verify_code的值并不是表单中输入的值，而且也不随着表单输入的更新而更新数据。 更难以理解的bug是点击输入验证码后，点击其他表单进行输入时，刚才输入的验证码就会自动清空，有时会直接切换显示出上次输入的数据。 通过打印了一堆日志发现，order的值只在点击提交才会存储变更，这并不是我想要的结果。而且order的值并没有通过Vue生成对应的 getter/setter 属性。 列出疑问 为什么输入的数据会清空？ 为什么order.verify_code的数据不是动态响应用户输入的？ 为什么刷新页面后order.verify_code的值是刷新之前填写的值？ 为什么Vue不自动生成属性相对应的 getter/setter ？ 探索既是发现针对问题寻找答案我很清楚，问题肯定是出在reload()函数的代码中，但是究竟要怎么修改呢？为了找到出现这种状况的原因，我仔细研读了Vue的官方文档。下面就针对这次的问题科普下Vue的知识： 关于深入响应式原理，官方文档是这样写的： 如何追踪变化：把一个普通对象传给Vue实例作为它的data选项，Vue.js将遍历它的属性，用object.defineProperty将它们转为 getter/setter。 变化检测问题：受ES5的限制，Vue.js不能检测到对象属性的添加或删除。因为Vue.js在初始化实例时将属性转为 getter/setter，所以属性必须在data对象上才能让Vue.js转换它，才能让它是响应的。 Vue官方文档cn.vuejs.org/guide/reactivity.html例如：12345678var data = &#123;a:1&#125;var vm = new Vue(&#123; data:data&#125;) // vm.a 和 data.a 是响应的vm.b = 2 // 不响应data.b = 2 //不响应看到这里，我的疑惑就已经清晰了，原来文档中写的很清楚。 并且在data的API解释时，文档中也说明了：Vue实例的数据对象，Vue.js会递归地将它全部属性转换为 getter/setter，从而让它能响应数据变化。这个对象必须是普通对象，原生对象 getter/setter 及原型属性会被忽略。 Vue官方文档cn.vuejs.org/api/#data 所以原因出在，我没有在data中事先声明order中的各个属性，导致Vue在创建实例时没有遍历到这些参数从而转换成相应的 getter/setter ，也就无法检测到这些属性的变化。 更改问题代码找到了问题的根本，也理解的问题的发生原因，我需要修改我的代码。正确的代码应为是：12345678910111213141516171819202122232425262728293031&lt;script&gt;data()&#123; return &#123; order: &#123; verify_code: '', phone: '', real_name: '', ... add_detail: '' &#125; &#125;&#125;,methods: &#123; data()&#123; reload() &#123; let order_cookie = getCookie('order') if (order_cookie) &#123; this.order.phone = order_cookie.phone ... &#125; this.order.verify_code = '' ... &#125; &#125;&#125;,route: &#123; data() &#123; this.reload() &#125;&#125;&lt;/script&gt; 问题解决了，归根结底好像是我没有好好阅读官方文档的缘故，好尴尬呀～不过在这之后，我准备仔细看一遍官方文档，了解Vue深层运作的原理，分析一下源代码。 作为一个Vue初学者，差的还远呢。 解决方法不唯一同样，在浏览官方文档的时候，也发现了针对这次遇到的问题的另一个解决办法。俗话说嘛，条条大路通罗马，我们Vue的大神也留了另一条路让我们过坑。 还是引用官方文档的描述：有办法在实例创建之后添加属性并且让它是响应的。对于Vue实例，可以使用$set(key, value)实例方法： 12vm.$set(‘b’, 2)// vm.b 和 data.b 现在是响应的对于普通数据对象，可以使用全局方法Vue.set(object, key, value)： 12Vue.set(data, ‘c’, 3)// vm.c 和 data.c 现在是响应的有时你想向已有对象上添加一些属性，例如使用Object.assigh()或_.extend()添加属性。但是添加到对象上的新属性不会触发更新。这时，可以创建一个新对象，包含原对象的属性和新的属性： 12this.someObject = Object.assign(&#123;&#125;, this.someObject, &#123;a:1, b:2&#125;)// 不使用 Object.assign(this.someObject, &#123;a:1, b:2&#125;) Vue官方文档cn.vuejs.org/guide/reactivity.html 参考文档 Vue官方文档-深入响应式原理","categories":[{"name":"技术","slug":"技术","permalink":"http://Lemon23.github.io/categories/技术/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://Lemon23.github.io/tags/Vue/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://Lemon23.github.io/categories/技术/"}]},{"title":"Hexo的过坑记","slug":"Hexo的过坑记","date":"2016-10-21T07:56:46.000Z","updated":"2016-11-21T08:51:10.000Z","comments":true,"path":"2016/10/21/Hexo的过坑记/","link":"","permalink":"http://Lemon23.github.io/2016/10/21/Hexo的过坑记/","excerpt":"博客终于搭好了，就写一篇文章就来记录一下我是如何配置Hexo直到部署上线的。顺便写给我家的小胖子，留着以后过坑用，拿走不谢哟～ ^ ^","text":"博客终于搭好了，就写一篇文章就来记录一下我是如何配置Hexo直到部署上线的。顺便写给我家的小胖子，留着以后过坑用，拿走不谢哟～ ^ ^ 安装安装NodeHexo是基于node.js的，所以安装 Node 是必须的。 安装Git这个也是必须的，你需要把本地的hexo内容提交到github上。 申请Github账号去申请个Github账号，创建用来做博客的远程仓库、域名和服务器之类的，这个就不细说了，配置不会的话另行百度。 安装Hexo。 首先创建一个文件夹，存放hexo的配置文件（命名为Blog最直观）。 如果你不确定有没有安装过Hexo，或者之后需要查看它的版本，可以在终端输入： 1$ hexo version 然后打开终端，进入Blog文件夹 1$ cd Blog 运行下面的命令安装Hexo： 1$ sudo npm insall -g hexo 执行init命令初始化hexo： 1$ hexo init 现在，安装工作就结束了，Blog就是你博客的根目录，之后所有的操作都在这个文件夹下进行。 生成静态页面(该命令也可缩写为 $ hexo g) 1$ hexo generate 本地启动服务，进行预览： (该命令也可缩写为 $ hexo s) 1$ hexo server 在浏览器中输入终端打印出的路径，默认都是：http://localhost:4000 也可能是 http://0.0.0.0:4000 Hexo的基本使用 $ hexo new [layout] &lt;title&gt; 创建一篇新文章。其中layout是可选参数，默认值是post。Hexo提供的layout在scaffolds目录下，也可以在此目录下自建layout文件。新建的文件则会保存到 source/_post目录下。你也可以更改默认布局的参数，如post布局，你需要打开 scaffolds/post.md，增加类别和描述。再新建一篇文章就能看到增加了文章参数。 $ hexo generate 也可简写为$ hexo g 在部署前需要通过该命令把所有的文章做静态化处理，生成相应的html、javascript、css。 $ hexo deploy也可简写为$ hexo d 生成静态文件后要发布到github。在此之前要先配置好deploy指令，在全局配置文件(_config.yml)中找到deploy，并修改属性值： _config.yml123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/Lemon23/Lemon23.github.io.git branch: master 然后安装hexo-deployer-git： 1$ npm install hexo-deployer-git -S 最后利用hexo指令 $ hexo d 发布到github就完成了。在你的github的仓库中已经能看到刚刚部署的静态Web网站。 在这里要强调一下，如果部署的是个人页，新建的仓库必须是 your-user-name.github.io。具体创建仓库和申请github个人域名的步骤，这里就不细说了，很简单。 Hexo全局配置文件在Blog/_config.yml，这是全局配置文件，跟主题配置文件是不同的，千万别弄混了。 _config.yml1234567891011# Hexo Configuration## Docs: https://hexo.io/docs/configuration.html## Source: https://github.com/hexojs/hexo/# Site 站点配置title: Lemon 的博客 #网站标题subtitle: #网站副标题description: #网站描述author: #你的名字language: zh-CN #网站语言timezone: Asia/Shanghai #网站时区 中国的小伙伴们，时区你就这么填写就好了。 _config.yml123456# URL ## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http://lemon23.github.io #网址，搜索时会在搜索引擎中显示root: / #网站根目录permalink: :year/:month/:day/:title/ #永久链接格式permalink_defaults: #永久链接中各部分的默认值 关于url值的问题，如果你绑定使用的是Github，那么就填你github上的域名，例如：http://your-user-name.github.io。 _config.yml123456789# Directory 目录配置source_dir: source #资源文件夹，这个文件夹用来存放内容public_dir: public #公共文件夹，这个文件夹用于存放生成的站点文件tag_dir: tags #标签文件夹archive_dir: archives #归档文件夹category_dir: categories #分类文件夹code_dir: downloads/code #Include code文件夹i18n_dir: :lang #国际化文件夹skip_render: #跳过指定文件的渲染，可以使用glob来配置路径 这部分在你没完全搞懂Hexo的文件架构时，还是别乱改了，本宝宝也不敢轻易乱动。 _config.yml123456789101112131415# Writingnew_post_name: :title.md # File name of new postsdefault_layout: post #默认布局titlecase: false # Transform title into titlecaseexternal_link: true # Open external links in new tabfilename_case: 0 #把文件名转换为小写（1）或大写（2）render_drafts: false #显示草稿post_asset_folder: true #是否启动资源文件夹relative_link: false # 把链接更改为与根目录的相对位置future: truehighlight: #代码块设置 enable: true line_number: true auto_detect: false tab_replace: Hexo有三种默认布局：post、page和draft，它们分别对应不同的路径。新建文件的默认布局时post，你也可以更改或者在post.md文件中增加默认布局参数。 _config.yml1234# Category &amp; Tag 分类和标签default_category: uncategorized #默认分类category_map: #分类别名tag_map: #标签别名 这个不用做什么更改，也不是所有参数都要有值的。 _config.yml123456# Date / Time format 时间和日期## Hexo uses Moment.js to parse and display date## You can customize the date format as defined in## http://momentjs.com/docs/#/displaying/format/date_format: YYYY-MM-DDtime_format: HH:mm:ss 可以改成你喜欢或习惯的时间格式，看着高兴怎么改都成。 _config.yml1234# Pagination 分页## Set per_page to 0 to disable paginationper_page: 10 #每页显示的文章数量（0=关闭分页功能）pagination_dir: page #分页目录 不想页面显示太长的可以把数字改小。 _config.yml1234# Extensions 扩展## Plugins: https://hexo.io/plugins/## Themes: https://hexo.io/themes/theme: icarus #当前主题名称 在这里更改你的主题名称，要提前配置好主题配置文件。 _config.yml123456# Deployment 部署到github## Docs: https://hexo.io/docs/deployment.htmldeploy: type: git repo: https://github.com/Lemon23/Lemon23.github.io.git branch: master 相对应的填写你自己的github地址和仓库分支。 Hexo更改主题配置到hexo后运行$ hexo s可以开启本地服务，进行浏览。打开页面后你会发现，这XX的也太丑了！对啦，所以现在的问题就是我们如何更改hexo的主题。 Hexo提供了大量的主题可供选择，主题的配置方法也不尽相同，但大概思路是差不多的，使用量最多的主题该署 hexo-theme-next了，随便一百度就有大把的教程。 你可以去下面列出的地方挑选喜欢的主题，基本上发布主题的人都会在仓库的wiki里讲解该主题怎么安装和一些配置问题。如果没有说明的地方可以再另行百度，毕竟人和人的需求不一样，文档也不可能符合每个人的要求。 知乎-有哪些好看的Hexo主题？ hexo-wiki-Themes 官方样式文档 hexo-theme-icarus我使用的主题是: hexo-theme-icarus 这个主题属于清新、简约的感觉，内置评论功能。接下来我就要讲这款主题怎么配置，如果你选择的是其他的主题，配置过程也大同小异，动动脑子动动手指，尽享无数主题。 icarus 的配置发布者已经把基本的配置步骤写在了wiki里，还包括FQA，如果有什么解决不了的问题也可以到https://github.com/ppoffice/hexo-theme-icarus/wiki去提问，或看有没有和你同样问题的回答。 Install 在你的终端中先进入Blog目录，创建themes/icarus主题文件夹路径，输入下列命令： 1$ git clone https://github.com/ppoffice/hexo-theme-icarus.git themes/icarus 更改全局配置文件(_config.yml)的theme属性为：theme: icarus 重命名主题配置文件_config.yml.example 为 _config.yml 别忘了检查你的主题版本是不是最新的： 12$ cd themes/icarus$ git pull 如果你的博客中需要添加搜索功能，你需要先安装hexo-generator-json-content： 1$ npm install -S hexo-generator-json-content 编辑_config.yml我分部看一下示例主题配置文件的内容，我再细细讲解每个属性的意思：_config.yml1234567# Menus 导航栏menu: Home: . #主页 Archives: archives #时间轴 Categories: categories #分类 Tags: tags #标签 About: about #关于你这部分就是博客导航栏的规划，之后你也可以自行编辑导航都显示什么，或者更改他们的路径。这里要说的是，主题只生成主页和时间轴的页面，其余的你要根据自己的需要自己生成页面文件。你可以使用相对路径，也可以使用绝对路径。 _config.yml1234567891011121314151617181920212223242526# Customize 私人订制customize: logo: #博客logo的设置 enabled: true width: 40 height: 40 url: images/logo.png #可以更改为你自己的logo图片，存在themes/icarus/source/css/images下 profile: #个人信息的设置，默认显示在左侧的那一栏信息。 enabled: true # Whether to show profile bar avatar: css/images/avatar.png gravatar: # Gravatar email address, if you enable Gravatar, your avatar config will be overriden author: PPOffice author_title: Web Developer &amp; Designer location: Harbin, China follow: https://github.com/ppoffice/ highlight: monokai #代码高亮样式，可以在themes/icarus/source/css/_heighlight中选择喜欢的样式 sidebar: right # sidebar position, options: left, right thumbnail: true # enable posts thumbnail, options: true, false favicon: # path to favicon social_links: #这是关注栏，填写你自己的各种网站的地址 github: http://github.com/ppoffice/hexo-theme-icarus twitter: / facebook: / dribbble: / rss: / social_link_tooltip: true # enable the social link tooltip, options: true, false 这里没什么好说的，相应的改为你自己的信息。_config.yml12345678# Widgets #右侧边栏设置widgets: - recent_posts - category - archive - tag - tagcloud - links这里是右侧边栏的显示配置，到时候你可以打开博客自己看，就是归档、标签云和链接之类的，如果你不想要哪个部分，就在这里删除它。_config.yml12345# Search #搜索配置search: insight: true # you need to install `hexo-generator-json-content` before using Insight Search swiftype: # enter swiftype install key here baidu: false # you need to disable other search engines to use Baidu search, options: true, false需要先安装hexo-generator-json-content，上面讲过了。_config.yml12345# Comment #评论配置comment: disqus: hexo-theme-icarus # enter disqus shortname here duoshuo: # enter duoshuo shortname here youyan: # enter youyan uid here如果需要开启评论功能，需要先去相应的地方注册账号，然后按照提示把ID或名字添加上。点击这里 跟着做就对了。剩下一些评论框自定义的样式就自行百度，或注册后在网站内进行更改设置就好了。_config.yml12# Share 分享设置share: default # options: jiathis, bdshare, addtoany, default提供了几个参数可供选择，你可以 点击这里 看到各种参数的样式，进行选择和更改。_config.yml123456# Plugins 相册设置plugins: lightgallery: true # options: true, false google_analytics: # enter the tracking ID for your Google Analytics google_site_verification: # enter Google site verification code baidu_analytics: # enter Baidu Analytics hash key主题内置了相册功能，一般不用做什么更改了，其他的可以参考这里_config.yml123456789# Miscellaneous 其他miscellaneous: open_graph: # see http://ogp.me fb_app_id: fb_admins: twitter_id: google_plus: links: Hexo: http://hexo.io这里没什么好改的，参考这里 进行到这里，你的博客样式已经改好了，运行hexo g和hexo s本地浏览下效果吧。接下来的工作就是你自定义样式了，主题样式文件都在themes/icarus/source/css/_partial里，对照着页面文件找到对应的class样式去修改吧。 发布文章创建文章 $ hexo new &quot;我的第一次提交&quot; 打开source/_post目录下的我的第一次提交.md编辑内容 启动本地服务，浏览效果 编辑文章内容，需要你学会 Markdown 格式，还有些格式问题可以直接百度去搜索，多写一些文章自然就记下了各种格式标签。 这里说一个小技巧： 发布的文章较长时，主页会全部显示出来，页面也会变得很长。这个时候我们在编辑内容时，在合适的地方添加一行代码：&lt;!-- more --&gt;，在它之上是摘要，是在主页会显示的文字部分。在它之下是余下全文，在主页中会多一个阅读全文的按钮，点击后才会看到全部内容。 这样就避免了主页显示不必要的内容，占据大量篇幅。 文章参数打开 scaffolds/post.md 增加类别和描述，修改默认布局的参数：post.md12345678910---title: #标题date: #日期时间tags: #标签categories: #分类comments: #是否允许评论 true 或 falsetoc: #是否添加文章目录 true 或 falsethumbnail: #侧边栏封面图banner: #文章顶部封面图---在新建一篇文章，你就能看到新建的文章已经新增了这些参数，不用每次自己手打，不需要的值就可以空着。 其中tags和categories有多个值，用数组的形式写入。 thumbnail是主页侧边栏的展示图，这里如果不给定值，Hexo自动显示默认图片。 banner是文章的顶部封面图，在主页也会展示，如果不给定值就不显示。 图片都放在source/images中，如果没有这个文件夹就新建一个，在这里存放文章中会用到的图片。 注意！引用图片路径时，一定要以/开头，例如：/images/img1.jpeg 这样，无论是在主页或者打开文章都可以显示图片。 绑定自定义域名现在你在浏览器输入http://your-user-name.github.io就能显示你的博客了吧，那么如果想要使用自己的域名访问要怎么弄呢？接下来我就讲一下域名和github绑定的问题。 首先，你要有自己的域名。如果还没有就去买一个，购买域名可以去GoDaddy或者万网 注册DNSpod，添加域名，添加记录，如下图： 在source文件夹里创建CNAME文件，不要带任何后缀，在里面写入你的域名，例如：lemon23.me（前面不要加http://） 然后就在终端输入$ hexo d -g 试试吧 我也是刚搭建好这个博客，如果有写错的地方还请多多见谅，提出意见，我会及时更改的。 补充之前遇到了一个问题，就是Hexo的图标等加载不出来，打开控制器发现是位于vender文件夹下的样式文件加载不到。原因竟是github的升级导致的，icarus主题的作者已经更新了代码，小伙伴们git pull一下就好了。 参考资料和其他 Hexo-theme-icarus/wiki 主题官方文档 简洁轻便的博客平台: Hexo配置详解 NexT主题与Hexo更搭哦（基础篇） 给你的Hexo站点添加最近访客（多说篇） 给hexo配置上评论和访问量 Hexo博客优化，如何加快你的博客访问速度(精) Hexo站点中添加文章目录以及归档 域名和github绑定的问题 Hexo Docs","categories":[{"name":"技术","slug":"技术","permalink":"http://Lemon23.github.io/categories/技术/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://Lemon23.github.io/tags/Hexo/"}],"keywords":[{"name":"技术","slug":"技术","permalink":"http://Lemon23.github.io/categories/技术/"}]},{"title":"海风吹拂的大连","slug":"海风吹拂的大连","date":"2014-07-14T02:33:25.000Z","updated":"2019-02-25T03:38:26.118Z","comments":true,"path":"2014/07/14/海风吹拂的大连/","link":"","permalink":"http://Lemon23.github.io/2014/07/14/海风吹拂的大连/","excerpt":"这次旅行的目的地是辽宁的大连，买火车票之前的三十分钟，我们的计划还不是这里（没错，我们的选择恐惧症又犯了）。最后买完火车票还是很忐忑，东北我们还是第一次踏足，希望少说话 少惹事吧，哈哈～","text":"这次旅行的目的地是辽宁的大连，买火车票之前的三十分钟，我们的计划还不是这里（没错，我们的选择恐惧症又犯了）。最后买完火车票还是很忐忑，东北我们还是第一次踏足，希望少说话 少惹事吧，哈哈～ 出发火车：［ 北京 –&gt; 大连北 ］ ［ D45 ］ ［ 发车时间：07:37 ］ ［ 到站时间：14:02 ］ ［ 全程时间：6 小时 25 分钟 ］ 返程中转火车：［ 大连 –&gt; 沈阳 ］ ［ 2083 ］ ［ 发车时间：08:50 ］ ［ 到站时间：13:53 ］ ［ 全程时间：5 小时 03 分钟 ］ 返程火车：［ 沈阳 –&gt; 北京 ］ ［ D16 ］ ［ 发车时间：14:32 ］ ［ 到站时间：19:37 ］ ［ 全程时间：5 小时 05 分钟 ］ 7月14日上午 7:37 的火车，我早早的就起床收拾，出去玩儿过几次后，收拾行李也得心应手了些。知道该带什么不该带什么，少装一些没用的东西。可我的行李箱还是塞的满满的，这次多带了两瓶酒，可以给我们的旅行夜晚增添些情调。 这次出发的火车站是北京站，我还要自己拎着重重的行李箱挤地铁过去，真不知道我能有那么大的劲儿，二号线换乘是没有电梯的，我就那么一点点的抬上去(大力少女！)…… 总之呢，尼尼就没有不迟到的时候，这点真的让我很烦，我最不喜欢等人了。上了火车以后，我们就开始补觉，尽管对于旅行我每次都会很激动，但也不至于像第一次一样，火车外的任何一个风景都不想错过，还是来个回笼比较实在啦。 下午 14:20 我们从大连火车站出来，也没顾着看什么风景，直接打车奔向预定的酒店。这次预定的是一家公寓式酒店，在甘井子区万达广场的后面。找了好久都转晕了也没有找到，只要让人家出来接我们（好尴尬，我号称人肉指南针呢）！！！房间窗外能看到海，却没什么的景色。坐高铁每次都让我们腰酸背痛，先休息休息再走吧，顺便商量一下一会儿去哪儿。旁边万达广场里有很多吃饭的地儿，所以我们这几天肯定是不愁没好吃的了，下午呢就吃了个汉堡王填填肚子。 下午 14:00 左右吧，我们商量一下，第一天到这儿，就先可着离我们近的地儿去溜达溜达，所以做足了功课的我就选定了星海公园和星海广场。万达广场前就是公交车站，很方便，而且大连有名的有轨电车也经过这里，体验了一把，如果没有那么多人的话，还是可以想象出一幅民国画面的，还是算了吧。 星海公园里有一座人鱼雕像，好多人都在这里拍照，我们也就没凑热闹。来到海边，自然想下去趟趟水，不过这里的沙子有好多小碎石，很扎脚，而且水里有很多游动的小虫子，恶心的不得了，被我发现了之后就赶紧拉着尼尼上来了。海里有许多人在捡蛤蜊还是蚌啊，我也不认识，沙滩上经常冲上来一堆黑色的贝壳。来之前就看到说大连的海水不是很干净，也没有细沙，都夹杂着石子，真的是这样啊。 公园后面有许多游乐设施，尼尼说他从来没去过游乐园，我就带他玩了一次海盗船，把我们吓得啊，每次悠到最高处往下落的时候肚子就痒痒的那种感觉，还是蛮刺激的，我看他也吓得够呛，还是挺好玩的，哈哈哈～～～ 从星海公园溜达到星海广场也不是很远，广场中央立着一座高大的华表，尼尼说这是薄熙来建的，什么什么的……算了，政治的问题我也不是很懂。往广场后面走去，海边有好多海鸥和鸽子，人们在给它们喂食。往海深处望去，可以看到正在修建的跨海大桥，很壮观。海面上飘着海雾，朦胧的感觉就像哥斯拉就要走出来了似的（我脑洞还是很大的）！！！ 星海广场旁边也有一块游乐设施，有个双层的旋转木马，看着好羡慕，好想坐一次啊！！！每个女生都会期待体验一次的！！！但尼尼不想坐……就我一个人傻了吧唧的一圈一圈的转也没有意思……那就算了吧。 走着走着已是黄昏了，走过一座桥，对面是一个欧式建筑群，傍晚亮起灯来很像上海滩的感觉，异域风情很浓郁，里面多是一些吃饭的地方，价格也不便宜。旁边的半山腰上有一座古堡式酒店，从一走进星海广场就可以看到它，建筑风格迷人，不知道是这里就有一个小山，还是建酒店时的设计。我当时就走不动道了，直勾勾的盯着这座大城堡，嘴都合不上了。尼尼也是被这个酒店吸引了，晚上酒店亮起灯从远处看好像浮在半空，我的公主梦爆发了！！！当时我俩就站在酒店前搜房价，看到数字后的惊恐啊就不说了，当时我们可是穷学生能有多少钱呀，哪儿住得起这种地方。当时就想，如果我要再去大连的话，一定一定要住在这个酒店，当时我就发誓了，哼！！！ 晚上又到了纠结晚饭的时候，既然来到大连，我肯定是要吃一顿海鲜的，最后选择了一家火锅店，点了好多菜啊肉啊海鲜啊，还要了鲍鱼。这个得说一句，鲍鱼涮着吃虽然保留了它的原味和鲜味，但其实没什么亮点可寻，味道一般。我又大脑袋了，这顿饭的伙食费花超了…… 大连的海鲜并不比北京的便宜，之前一直认为海边城市吃海鲜应该比北京便宜才对，少了中间的运输花销。其实呢……大连的海鲜真的真的比北京贵啊！！！ 7月15日早上 10:00 我们才起床，因为他不喜欢急匆匆的旅行嘛，那我就只好陪着他慢咯。早上就要纠结吃什么的问题，转了一圈万达，决定尝尝日本料理怎么样，大早上就吃生冷的寿司，脑子也是有问题了。我最爱吃鳗鱼了，当然不能放过吃鳗鱼的机会。他呢，看着菜单纠结半天，最后才选个蛋包饭。结果事实证明，我给他做的那个才是最好吃的。其实听到他说这句的时候，心里暖暖的，他还记得我给他做的味道，其实从小处就能感受到两个人之间的对彼此的感情，这就是旅行的收获。 吃完饭了就要听我的了，开始我一天的计划。先去付家庄海水浴场这里是滨海路之行的起点。门口有一个大大的海螺雕像，路两旁还有小人铜像，都很有意思，在这里拍了几张新奇的照片，往里走才到沙滩。来这里的人很多，海岸都被太阳椅和太阳伞占的满满的，这些都是要花钱坐的，商业气息太严重。不大的沙滩再加上来这里的大人小孩，落脚的地方都没有。天是阴的，海水很凉，让我不禁打冷战，就这时，看海深处慢慢飘来一股雾，没一分钟就到了海岸边，能见度也就达到五米的距离，再远处的人都看不见了，那感觉真是恐怖啊！！！所以我就说大连是哥斯拉的故乡嘛，这次的体验想起来就让我不寒而栗，迅速飘来的雾和能见度的降低，无不带给人一种后背冒冷汗的感觉。 雾来的快去得也快，没多久也就散了，太阳也出来了，海边的天气都是变幻莫测的。我们也要出发开始滨海路沿海慢走的旅程了，如果来到大连，一定要自己走一走滨海路，哪怕是一小段，无数电影画面闪现在脑海中，一直都很向往这个场景，左边是山，右边是大海，道路随着山蜿蜒曲折，旁边不时有车呼啸而过，你却和他人的节奏完全不同，眼里心里只有这无限的景色，每过一个弯都会看到一片新大陆。尼尼说他的父亲在他来之前也推荐他到滨海路走一走，其实也可以选择驾车游玩，比走着要省力得多，遇到美丽的风景就停车下来拍几张照片，接着继续前行，这也是不一样的体验了。刚开始走走停停还很高兴，打打闹闹的，后来就感到疲惫了，坚持走到了燕窝岭。 这里有个婚庆公园，里面有很多富含浪漫色彩的风景，适合情人来拍照。在这里还能看到左右的山崖，海浪拍击捡起白色的浪花，前面就是一望无际的海岸线，没有任何遮挡物会阻拦你的视线。海上会有快艇疾驰而过，留下一道白色的痕迹慢慢消失在海中。 出来以后我们都感到累了，也不想再往前走了，就慢慢的往回溜达找吃晚饭的地方。中途逛了逛沃尔玛，买了很多面包，留到明天当午饭吃。在旁边找到一个好评不少的店——大地春饼店，特意来尝尝鲜。京酱肉丝跟北京的味道没什么差别，还要了一个大连的特色炒焖子，怎么说呢，感觉像淀粉糊，我们都不喜欢吃，而且里面有芥末的味道，这是我最受不了的，整体下来性价比还是不错的。 7月16日今天我们要冒充地质学家，看看大连拥有的奇特怪石和丰富的地质层。我们要到大连火车站后面乘坐轻轨前往，大连的地铁太小了，座位也少，是为了给站着的人腾出充分的地方吗？ 金石滩旅游区需要门票，大概 20 元，可以任意乘坐园区内观光车游览，像地质公园还是要另收票的，成人 70 元。今天一天就在这里面晃了。 一进到滨海地质公园，就被眼前的景色吸引了。进去不远，有一条往海边走的小路，延伸下去就可到达山崖边，路尽头有一座地中海式的小亭子，白杆蓝顶，只是为了映衬景色而建立的，但是却带来了清新的感觉，这里是最适合拍照的了，左右两边都是被海水拍击的山崖，你可以感受磅礴的气息，也可以享受地中海的宁静。站在亭子下，可以看到左手边的情人湾，山崖上写着红色的三个大字，实在是不低调。 越往里走人越少，感觉也越真实，道路有时要翻山越岭，有时临近海岸，海水会溅到身上，旁边的崖壁可以看到石层的沉积，颜色的不同，展现在眼前的独特地质风貌还在被海水一次次的冲刷。 走到公园最深处有一座铁链制成的桥，桥底用木板铺成。海边风浪大，桥晃晃悠悠的，更别提走上去了。尼尼有些害怕，不愿意走上去，我贼大胆怎么可能退缩呢！！！真的走上去以后并没有那么恐怖，桥还是很坚固的，我在上面走来走去的，又自拍又看风景。尼尼就站在原地拍拍原处海里的景色，丝毫不想参与我…… 从地质公园出来，我们就做观光车前往十里黄金海岸，据说这是大连仅有的沙细海清的地方，真的来踩一踩之后才知道————沙细海清那是跟大连其他的沙滩相比来说的。堆堆沙子，踩踩水，捡捡贝壳，照照相，也就没什么意思了，怎么就是找不到青岛的那种感觉呢？海面上的风景虽说也挺美的，但是和青岛那种美如画的感觉还是有区别的。我觉得主要是大连海上雾太大，每天看着都是灰蒙蒙的一片，没有蓝天白云衬托着碧蓝的海水，怎么可能好看的…… 离开沙滩出来后，闻到一阵烤鱿鱼的香味，正好勾起了我贪吃的欲望，拉着他寻着味道找了过去。饿了吃什么都香呀，而且永远拒绝不了烤鱿鱼的味道，嘿嘿，我们就这样一起吃得胖胖哒！回去的路程也是很艰难的，轻轨站台上都已经站不上去人了，等了几辆才挤上去，人多的不得了。我的个子矮，不好够到顶部的扶杆，只好扶着他，这一路他就一直搂着我的腰，扶着我怕我摔倒。列车虽然晃晃的，我却感觉很安全。 7月17日旅行已经接近尾声了，因为时间问题也取舍了一些景点的游玩。今天第一站要去海之韵公园，我找好了公交线路坐车前往，结果因为我的资料收集错误，导致遇到点儿小麻烦。预定的公园入口却在施工，需要绕到另一个入口进入，还是耽误了不少时候。最后是和另一对情侣拼车前往，路上经过迎宾路，绿化很美，不时出现几个雕塑立在草坪里，这条路是通向棒槌岛的，里面有专供国家要员休息的宾馆，可以说是北京的中南海，所以这条必经之路被修建的非常华丽，两旁的草木也修剪的有模有样。 海之韵公园就在棒槌岛入口左侧的小坡上，乘坐观光车可以节省不少时间和体力。它会带你体验公园内一个神奇的地方————是一个上坡路，可车在这里熄火后会自己向上走，把水倒在地上会向坡上流去。真正自己看到这个现象的时候还是很奇妙的，大自然也带给我们不少乐趣。在这里的山崖边，你可以看到右侧的棒槌岛，尽管很小，但是俯瞰可以看出棒槌岛的形状，是在景点里面看不到的景色，真的好像一个棒槌飘在海中。 公园最后一段是曲折的路，两侧山壁上布满了雕刻的海洋生物，在这里可以排出很多新颖的照片，和鲨鱼来个亲密接触，和海母握握手，多有意思。 到公园尽头在乘坐观光车出来，门口很少能打到车，那顺便我们就从迎宾路溜达下去吧。看看一路的景色，和各式各样的小花照个相。 从迎宾路出来我们前往渔人码头决定小资一下，这里有许多餐馆，都是用新打捞上来的海鲜制作的，价格也不便宜。还有很多文青的咖啡店，这里的建筑都是欧式的，码头边停着一排排的渔船，渔夫有的闲坐在船头，有的在收拾渔网，这幅景色还是很惬意的。码头左侧是滨海东路段的木栈道，出来后无事溜达溜达，也不知道走了多远走到哪儿了，只是一边聊天一边走，累了就打车回来了。这段路没什么意思，没有景只有山，一直在顺着山走啊走的，沿途的海滩人也少，像躲清静的话可以来这里转转。 7月18日其实五天的旅行，有一天半都在火车上，这最后一天我们什么也没干，早早的退房打车去火车站。前几天买火车票的时候说已经没有当天大连回北京的票了，只有硬座车先到沈阳转站到北京，没有办法只好这样。结果坐上火车我俩就傻眼了，硬座真的不是人坐的啊！！！我发誓这辈子不要再坐硬座了，人又多地儿又窄，想想要坐五个小时的硬座我脑袋都大了。因为起得早我们都需要补觉，可是座位真的好硬啊（铁路局很诚实），不知道怎么熬过去的，下车后我的尾椎都要废了。 到沈阳换乘的时间不多，我们没有闲着的时候，出来草草拍了一张沈阳火车站的照片就立马过安检进站了。沈阳到北京坐的是高铁，这下我们可以好好的休息会儿了。结果我们坐了十个小时的火车回到北京，这也算是我人生的一个磨难了，好艰苦。 这是我们玩的最久的一次，中间经历了很多计划赶不上变化的事情，不管结果的好坏也玩下来了。大连给我印象最深的就是海雾，莫名其妙的就会出现，带着一股寒意。大连的沙不细、海不清，毕竟它是一个工业化比较明显的城市，经常可以看到海上作业，这不同于青岛。可并不会让我觉得大连环境不好，每个城市有每个城市特有的味道，我还是很喜欢这个美丽的地方的。它还有很多我未知的东西，很多地方我还没有踏足。我觉得一次旅行能带给我的不止是新鲜的体验和美丽的景色，同时还会带给我另一种生活。还有他，无时无刻对我的照顾，让我发现不一样的他。","categories":[{"name":"旅行","slug":"旅行","permalink":"http://Lemon23.github.io/categories/旅行/"}],"tags":[{"name":"游记","slug":"游记","permalink":"http://Lemon23.github.io/tags/游记/"}],"keywords":[{"name":"旅行","slug":"旅行","permalink":"http://Lemon23.github.io/categories/旅行/"}]},{"title":"千年礼乐归东鲁 风云一举到天关","slug":"曲阜泰山济南","date":"2014-05-25T03:21:32.000Z","updated":"2019-02-25T03:38:57.457Z","comments":true,"path":"2014/05/25/曲阜泰山济南/","link":"","permalink":"http://Lemon23.github.io/2014/05/25/曲阜泰山济南/","excerpt":"这次旅行 3 天的计划排得满满的，每天都要早起奔向下一个目的地。我们旅行的第一站曲阜，我现在已经想不起来为什么要去那里了，当时可能经费不够，又想去哪里玩一玩吧……","text":"这次旅行 3 天的计划排得满满的，每天都要早起奔向下一个目的地。我们旅行的第一站曲阜，我现在已经想不起来为什么要去那里了，当时可能经费不够，又想去哪里玩一玩吧…… 出发火车：［ 北京南 –&gt; 曲阜东 ］ ［ G105 ］ ［ 发车时间：07:36 ］ ［ 到站时间：09:56 ］ ［ 全程时间：2 小时 20 分钟 ］ 返程火车：［ 济南 –&gt; 北京南 ］ ［ G196 ］ ［ 发车时间：16:02 ］ ［ 到站时间：18:07 ］ ［ 全程时间：2 小时 05 分钟 ］ 5月25日早上 10:00 从火车站出来，我的第一感觉就是，好像到了北京郊区。虽然马路很宽，但是人烟稀少，路上没什么人也没什么车。我们打车去往酒店，这次我选择了一个经济型酒店——锦江之星。外地的锦江要比北京房价便宜多了，环境也很好，干净、卫生，主要还是离景点很近，走路 15 分钟就可以到达。放置好行李我们就出发了。 上午 10:30 我们先去往孔庙，“三孔”的联票价格是 ¥ 150 ，还有有点小贵的。孔庙院落共九进，依次穿过圣时门、弘道门、大中门、同文门等等。院落里草木郁郁葱葱，还有一棵古松，树皮成水波纹，好似在历史的长河中沉淀下来的细沙。 穿过大成门后是一座亭，名为杏坛，这是孔子后代为纪念孔子讲学所建。 再后面就是大成殿，匾额为清朝雍正皇帝御书。黄瓦 红墙，一副大气凛然的样子。殿前许多烧香祭拜孔子的人，香火很旺盛，都是来求考试顺利，金榜题名的。 我本来也打算凑个热闹的，可是想想我也没有考试，还是别捣乱了。 中午 1:00 我们穿出孔庙，经过阙里步行街到达孔府。路上买了个山东大煎饼吃，煎饼皮是脆的，里面刷上甜面酱，夹着小葱，甜咸适中。现在想起来也流口水，真的特别好吃，要不说像这种地方特色的吃食还是在小摊上买的味道好呢。 孔府是官衙和住宅合二为一的建筑群，穿过衙堂之后是住宅区，最后面是孔府的后花园，花园内假山、池塘、亭台……每一处都是独特的景色。花园内最著名的是一棵四百多年树龄的柏树，树中间还生长着一棵槐树，真的是很稀奇的景儿。 下午 3:00 我们到达孔林，这里是孔子及其家族后裔的墓地。本想着应该是一种园林的感觉，到了以后还是有种阴森的气息…… 尼尼劝过我别去了，可是到这里了怎么能差一个地儿不去呢，那不符合我的性格啊。我只能说，还好我们到这里的时间还早，如果是傍晚或者来这里的时候刚好阴天，那真的是挺慎人的…… 来这里的人有些是奔着孔子墓碑去的，一来祭奠孔子，二来也是求个考试能有好成绩。我个人觉得祈福这种事还是到前面提到过的大成殿比较好，毕竟这里是孔子安息的地方，进入孔林还是怀着一颗缅怀的心比较好。当然，来孔林并不是要你一个个的祭拜谁，孔林的第二大看点是在墓碑的题词上，林内有数千块不同朝代的墓碑和题记刻石，其中有历代大书法家的亲笔题碑，这无疑是个赏鉴书法的好地方。 晚上我们随便找了家饭馆儿吃了点家常菜（当然依旧“选择恐惧症”），因为第二天要早起坐大巴赶往泰安，任务沉重，所以还是早早睡觉的好。 这一天我们着实走了不少路，很累。也许我并不能在这一天的兜兜转转中体会到多少孔子的儒家思想文化，但是对于历史和中国文化我还是抱着崇敬的心的。曲阜城确实很小，也并不繁华，但是这才正适合衬托儒家思想吧。有时间我也会思考“仁”的意义，不妄我入学时对孔夫子的三拜。 5月26日 转乘大巴：［ 曲阜 –&gt; 泰安 ］ ［ 202 ］ ［ 发车时间：06:40 ］ ［ 到站时间：08:10 ］ ［ 全程时间：1 小时 30 分钟 ］ 我知道，这都怪我太年轻……不过不疯一次怎么叫青春！！我从没想过我可以站在泰山顶上，来之前我并不觉得1524米很高，真的爬过一次才知道它为什么被称为“五岳独尊”。 很早我们就起床奔向长途汽车站，因为今天的目标很艰巨，我们要腾出足够的时间去完成它。大巴刚到达泰安我们就打车奔向酒店，放好行李便急忙开始我们自虐式计划。 上午 9:30 我们到达岱庙，我和尼尼两个人基本处于 “懵～～” 的状态。虽然我深知已经比计划的时间晚了，可是也不能草草了事嘛，所以该游览的地方我是一点儿不差的。 岱庙是古代帝王祭祀山神的地方，爬泰山前我也是要假模假式的来逛一逛。里面的一树一石一瓦一字，都好象在诉述历史上发生在这里的故事、人物，又好像在告诉人们曾经的辉煌和气势恢宏的场面。 上午 10:30 出岱庙要走一段坡路才能到泰山脚下，别小看这段路，就像是泰山在测试你的能力，我们走上这段长坡已经有些疲惫了。 一天门代表着天梯的开始，在这里有些小贩卖爬山的器具，我买了一杆木头的登山杖，尼尼还跟我说没必要，结果它可起了大作用了！！！别小看一个细拐杖，在爬山时它可以帮你膝盖分担不少力，保护膝关节不会受损，还可以更节省体力。 紧接着就是红门宫，它是中线登山的起点，因岭南崖有一红石如门而得名。 继续往上到达万仙楼，可游览到革命烈士纪念碑、风月无边石和三观庙。到了万仙楼才真正的开始爬泰山，在这里需要买票才能继续向上走。斗母宫位于万仙楼北，之后是高山流水亭和径石峪，它是中溪支流的一片大石屏，上面刻着1400多年前摩勒的《金刚般若波罗蜜经》的部分经文，很是宏伟，中间还可游览奉安纪念碑和柏洞。 接着穿过壶天阁和白马岭就到了中天门，它是泰山登山东西两路的交汇点，也是盘山公路的终点，这意味着再往上会更加艰难。到这里为止我们已经很累了，路上边爬边看边照相，背着一个单反爬山是我俩做的最差的决定了，我觉得要不是单反很贵，我们真的会考虑扔了它吧！！！我们并没有在中山门做过多的停留，时间已经过了很久了，而且我们一路都在配合身体做一些休息调整。爬山还真的需要你对你自己的身体足够了解，硬拼是没戏的。 好了，我们继续向上爬，过了中天门就是云步桥，跨中溪而建的一座单孔拱形石桥，溪水从桥下流向山脚，站在桥上你可以回头看你爬上来的路，蜿蜒、飘渺，山下的城市已经变的很小了，从此往上，每爬一段回头望去都是不一样的景色，感觉你离天空越来越近了。 走过五大夫松和望人松就来到泰山最著名的爬山路段十八盘，这里奇陡无比，站在这下面往上看感觉台阶都是垂直的，这里的石阶窄的不到半只脚长，到这里每一步都很艰险，只能扶着扶杆一点一点的向上爬，而且一般爬到这里的人都很累了，我至今心里都很畏惧这段路，这才是挑战！！！ 十八盘起始处是升仙坊，好像告诉人们爬上这段陡峭的路就可以升仙了，名字起的真的好贴切。终点处是南天门，到了这里就是真的成仙了，穿过它就是泰山顶，意味着终于到达了巅峰。 实际上，南天门并不是泰山最高处，顶峰在玉皇顶，到了这里你就能看到那个著名的巨石五岳独尊了。可惜我们并没有到达那里，因为前面耽误了太多时间，我们浏览了顶峰的美景后就匆忙下山了，如果等到天黑再下山是很危险的。 在山顶上向下望去，泰安城尽在眼底，云也被我们踩在脚下，这种感觉真的好像仙人踏着白云来游览人间一样。此时此刻，我忘了什么是累，只是抓紧时间想记住每一处景色。我心里真的很感激尼尼，有他陪我一起看这风景，感觉更美丽了～～一路上来遇到了很多想放弃的时候，我们都陪着对方鼓励着向上走，互相换着背包，他一直很照顾我。就这一次，我充分感受到了他对我的那种体贴，尽管这不是他想要的旅行，但他还是陪着我走完了。 回来后我俩直接瘫倒在床上了，肚子打着咕噜可还是不想动。他脖子后面也有些晒伤了，我帮他涂舒缓膏的时候，看着他脖子后面的晒伤，心里还是有点不忍的。我从没对他说过什么感人的话，做过什么感人的事儿，他也如此，我们都是不善于表达情感的人，可一些小事能让我们感受得到感情一直都在，就算不说出来，也无妨了。 晚上我们就近找了家做山东大煎饼的饭馆，尝尝本地的味道。又饿又累的，也尝不出什么好吃不好吃的了。薄脆一样的煎饼皮，就这翠绿的小葱，蘸着豆瓣酱……感觉跟小摊儿上买的就不是一个味儿呢……石墨豆腐味道还是不错的，我喜欢吃这种有淡淡卤水味儿的豆腐，而且是自家磨的，口感很弹，豆腐蜂窝里也浸满了汤汁，味道都熬进去了。好像这里大小饭馆都有免费的现磨豆浆喝，豆浆味道也很好啊，都装在保温瓶里。一喝就知道是自家磨的，和豆浆粉冲出来的口感可不一样。豆浆颜色就很醇正，保温瓶一打开就会飘出淡淡的香气～～～ 第二天起来我们都为今天的疯狂买了单，走路瘸瘸拐拐的，大腿和小腿肌肉都疼的要命。可我们还有最后一天的行程，就算疼，也要拼了命的走完呀！！！ 5月27日 转乘大巴：［ 泰安 –&gt; 济南 ］ ［ 243 ］ ［ 发车时间：07:20 ］ ［ 到站时间：08:50 ］ ［ 全程时间：1 小时 30 分钟 ］ 来到这多半是因为那句“还记得大明湖畔的夏雨荷吗”，这应该算是这趟旅行最惬意的一天了，如果我们的腿还好好的…… 不知道我们两个小瘸子是怎么走下来的，感觉尼尼的脸都是黑的，哈哈～～ 那今天就开始体验一把皇阿玛的生活吧。 早上 9:00 到达济南长途汽车站，我俩都是一瘸一拐下车的。把行李寄存一下，我们打车去往第一站——趵突泉，印象里的趵突泉都是老舍给我描述的样子，但听说早前趵突泉出现停喷了，不知道我这次能不能见到我记忆里的那个趵突泉。 顺便说一下，济南的出租车司机也许是我见过最没职业操守的了，我不熟悉地形，可怎么好像去哪儿都要走几个单行线绕一下呢？还有就是我看好了路牌记好了路名，却被告知没听说过这条路！！！明明就是火车站旁的一条路，会那么没有名声吗？济南司机真的很不友善，让我对这个城市的印象都很差，因为他害我们没有赶上火车而改签。 到了趵突泉门口，我们买了套票，可以从公园后面坐游览船经过五龙潭直接到达大明湖，这样给我们省了不少走路的地方。 进到趵突泉公园里，给我的第一个感觉就是人好多人好多人好多…… 不过我还是很高兴看到了小时候读到的那个趵突泉，三个泉眼一起喷出泉水，景色和语文书上的插图一模一样。但说实话，涌出的泉水并不高，看来还是不复当年的光彩了。 公园内景色布置得很美，还有许多其他的小泉眼，许多人都在接泉水喝，我们也接了两瓶，泉水清凉，没有平时喝矿泉水的那种味道，也没有别人形容的甘甜，没有味道但却清凉可口。院落、绿植、溪流、泉眼，仿佛置身于江南园林，花园中假山层叠，溪水穿桥而过，景色宜人。 上午 10:30 的样子，我们走到公园后面等待坐船。游览船穿过济南老城区的西门桥，途径五龙潭，进入济南历史上首座客运船闸——五龙潭船闸，期间可感受 2米多的落差，船东侧还可游览济南八景浮雕，最终进入大明湖。 大明湖面积很大，要想真的走一圈着实挺累的，所以我俩只是随意逛了逛，不过景色是真的没得说的，处处成景，湖水和绿树一起随着风荡漾着。 下午 3:00 我们急忙吃过午饭后就赶往火车站，可结果还是晚了，只好改签，回程的时间又往后推了一个多小时，我就用这点时间采购了点儿当地的特产。虽说济南的阿胶很出名，可不是随便在哪儿都能买的，有很多的假货。 其实这趟行程下来，我们两个已经疲惫不堪了，最后的济南也就是草草逛逛了事了，其实济南对我来说的意义也就只有趵突泉和大明湖。 回到北京后，尼尼跟我很很很正式的谈了一下，我们不要再有这种“跑路”式的旅行了。旅行有可能让两个人的感情崩裂，也有可能让两个人更靠近，我们就属于后者。当我们都身心疲惫的时候，很多坏脾气和不好的情绪都会透露出来，我们都感受到了，却还是很理解对方。我觉得这可能是我喜欢跟他在一起的一个原因吧，不做作，很放松。我和他的旅行还会继续，而我希望每次都可以带来不一样的体验和感悟。","categories":[{"name":"旅行","slug":"旅行","permalink":"http://Lemon23.github.io/categories/旅行/"}],"tags":[{"name":"游记","slug":"游记","permalink":"http://Lemon23.github.io/tags/游记/"}],"keywords":[{"name":"旅行","slug":"旅行","permalink":"http://Lemon23.github.io/categories/旅行/"}]},{"title":"青岛的记忆","slug":"青岛的记忆","date":"2014-04-27T02:21:08.000Z","updated":"2019-02-25T03:38:08.483Z","comments":true,"path":"2014/04/27/青岛的记忆/","link":"","permalink":"http://Lemon23.github.io/2014/04/27/青岛的记忆/","excerpt":"为了这次旅行，我筹备了好久好久，计算日期、订车票、设计路线……这不光是我的第一次旅行，同时也打开了我向往新世界的大门。","text":"为了这次旅行，我筹备了好久好久，计算日期、订车票、设计路线……这不光是我的第一次旅行，同时也打开了我向往新世界的大门。 出发火车：［ 北京南 –&gt; 青岛 ］ ［ D335 ］ ［ 发车时间：10:30 ］ ［ 到站时间：15:44 ］ ［ 全程时间：5 小时 14 分钟 ］ 返程火车：［ 青岛 –&gt; 北京南 ］ ［ D336 ］ ［ 发车时间：12:30 ］ ［ 到站时间：18:12 ］ ［ 全程时间：5 小时 42 分钟 ］ 4月27日激动的我早早的就起床，一遍遍地检查行李。我有些“强迫症”，总觉得落了些什么，至今我也是这样，每次旅行都要反复的检查好几遍自己的行李，我想我是太期待每次旅行都可以完美吧。 早上 10:00 我就到达了北京南站。尼尼问我为什么到这么早（这就是他迟到的托辞）。当然啦，我是第一次来北京南站啊！而且我激动我激动啊！真想可以直接飞过去，因为我要做 5 个小时的高铁。但当时的我没有出去玩过，没有做过高铁，更没有做过飞机什么的，我除了激动，兴奋，什么都不知道了。我以为过安检要好久，还要找进站口什么的，这些都需要花很多时间的。事实证明，我想的没错，安检绕着弯的排队。 不过那天火车晚点了……这下我着急的就是火车怎么还不开，还不开，还不开！！！这一路上我就兴奋的瞪着大眼睛看沿途的风景，虽然我根本不记得都看到什么了，但当时就是跟打了鸡血似的，也不觉得累。我旁边的那个笨蛋就一觉接着一觉的睡。 下午 16:00 火车晚点到达青岛。下火车我们俩都是很迷茫的状态，人生地不熟的，出站都一点一点摸索着走，现在想想还真是一脸的“懵”啊。走了好久终于出来了，回头看着青岛火车站，真的很美，当时已经夕阳西下了，黄色的光照着青岛站那是加特效的美啊，带着一种文艺复兴的气息！(这张图是回程时补照的，当时就顾着看了……) 我们预定的酒店就在青岛火车站对面，高高的圆柱体很好找，在旧城区真的很扎眼。早前我就挑选了很多酒店，最后选择了这家，地处旧城区，到很多景点都很方便，而且是海景房，阳台就可以看到大海，这是我梦寐以求的啊！！登记入住后，电梯把我们带到27层，酒店内的环境很好，格局是个中空环形，中间可以看到楼下的餐厅。 我记忆最深的就是当我推开门走到阳台的那一刻，应了那句“面朝大海，春暖花开”。虽然当时有些阴天，可又是另一番景色。海岸线一望无际，孤零零的栈桥延伸到海里，海的深处飘着零星的几座小船，闭上眼就可以听到海浪声，还有陪我一起看着这片景色的那个他，都是我至今记忆犹新的画面。 下午 17:00 我们安放了行李，欣赏了海景，就到了吃晚饭的时间啦。我们青岛的第一站就是登州路啤酒街，虽说我已经做足了功课，可是真到了地方其实还是有点路痴的，嘿嘿～～ ^_^ 查好了公交路线，我们就出发啦。 青岛有许多单行线，旧城区这边道路窄还很繁琐，所以其实离得并不远的地方，坐公交过去还是要绕些路才可以的。等到了天都黑了，我们两个选择恐惧症患者不知道要进哪家吃，边走边大众点评，哎…… 青岛最出名的美食就是海鲜和青岛啤酒啦，扇贝，蛤蜊……最主要的是还有大杯的青岛啤酒，这才是享受嘛！海鲜的味道真的很好，保证都是活的。啤酒味道很纯，因为是原浆啤酒，青岛啤酒厂就在我们吃饭的饭馆对面，这可比北京的罐装青岛啤酒好喝多了。如果你不怎么懂啤酒、不知道喝哪种的啤酒，那就听听店员的推荐好了。 今天的行程就只有吃，所有的悬念都留到后面。晚上回到酒店站在阳台上再看看夜景，栈桥的灯亮起来了，夜晚的栈桥更添了一番韵味。旧城区的灯光里都带着一股历史沉淀下来的感觉。 4月28日早上 7:00 我就被海浪声叫醒了，青岛的早晨好像来得更早一点。当我已经在阳台欣赏清晨的海景的时候，尼尼还在呼呼大睡。他为什么那么喜欢睡觉？？之后他跟我说，觉得旅行要慢，不喜欢着急的跑完一个景点又一个景点，那是旅游不是旅行。如今想起来，应该是我当时太激动了吧。( ^_^ )想一天走遍整个城市，永远处在兴奋状态，急着想看到这个城市的每一个角落…… 早上 9:00 前往台东商业街。为什么去这里呢？因为这是青岛最具特色的商业步行街。东起延安三路，西至威海路。 步行街两侧楼房的墙面是色彩斑斓、造型生动的大型壁画，形成了独特的彩色画廊。是全国最大的手工彩绘一条街，也是个集摄影、美食和购物于一体的好地方，我当然不能放过了。 中午 12:40 我们简单的吃了午饭，回到酒店休息一会儿，便开始我们此行最大的目的——青岛文艺复兴之旅。计划路线为：侯爵饭店旧址 –&gt; 邮电博物馆 –&gt; 信号山 –&gt; 胶澳总督府旧址 –&gt; 路德公寓旧址 –&gt; 基督教堂 –&gt; 天主教堂。一圈下来腿都要走废了，但不得不说，不把青岛的旧城区走一遍是无法真实感受到青岛的历史和它的异域风情的。计划里本来是有八大关的，这也是我觉得有些遗憾的，实在没有时间去了。 侯爵饭店旧址现为青岛市公安局市南区分局，造型极具城堡格调。青岛邮电博物馆，哥特式风格的建筑，本来打算回程之前来寄张明信片的，结果…就忘记了……就没有然后了……胶澳总督府旧址因为在装修，所以连信号山都进不去了。路德公寓旧址是德国建筑，现为青岛市车辆购置附加费征收管理办公室，其实很多青岛政府部门都把老房子作为办公室用，在视觉上让人觉得很不舒服，缺少了历史感。 基督教堂是德国胶澳总督府出资建造的，典型的德国古堡式建筑，教堂位于一个小山丘上，需要爬一段石阶，教堂后面种了一排樱花，一阵风吹过便下起了樱花雨，景色美得让人神离。 天主教堂风格包含哥德式和罗马式建筑风格，内部为意大利文艺复兴时期形式。这里是拍婚纱照的首选地，教堂左右两边的建筑都很低矮，所以在整体上很凸显教堂的位置，不论从什么角度拍摄，构图都是绝妙。而且就我而言，特别喜欢这种左右对称的建筑物。教堂主体为黄色花岗岩，再加上它的历史和宗教气息，给这幢建筑无限的年代感。 下午 15:00 又到了寻找美食的时间。我们决定去当地好评无数的一家烧烤店——美达尔烧烤店，品赏他们的特色菜“辣炒蛤蜊”。这家店就位于中山路，离天主教堂并不远。这家店并不大，装修也一般，如果不是看过推荐，我真的不会发现这间店。事实证明，他家的辣炒蛤蜊真的很好吃，咸鲜香一点儿不差，从此我就爱上了这道菜，可是回北京后我就再也没吃过那个味道的辣炒蛤蜊了。 凌晨 1:30 我们还没有睡，因为我们决定夜游栈桥。这么晚去当然是有原因的，起初我也不知道为什么尼尼要那么晚拉我出去，现在回想当时还是很甜蜜。具体的我就不写下来了，还是留给回忆吧…… 4月29日早上 10:00 我们才睁开眼，因为真的好困好困。当天我们的目的地就是——石老人海水浴场。”石老人”是青岛市区最大的海水浴场之一，海中有一个巨石，很像一个老人坐在海里。据我收集的数据说，这是青岛人最少，海也很清澈的一个海水浴场了。也对啊，因为远嘛，所以没什么人去的，它就在崂山脚下。不过真的是人少、海清、沙细，但就是路远啊，做了好久的公交。我们计划是把一天的时间消磨在这儿。当时我们去的时候浴场外围还在装修，有一张A4纸指引着一条小路，还好我们找到了，不然绕一大圈进来可走不少路呢。 到了海边，我们俩的本性就暴露了，拍照、玩水、堆沙子、捡贝壳……我们真的就把这几件事来来回回玩了一下午！而且我并不觉得无聊，反而玩到了日落还不舍得走。 “石老人”海水很凉，也很清澈，对于我这个从小生活在北京，只去过北戴河的人来说，这是我见过最清澈的海啊！！！（当然，这两个地方没法比……没办法啊，我哪儿都没去过嘛）就这样一直玩到太阳要下山了，我还是不肯走，求了他好久，让我再捡点儿贝壳。就原谅我这个没见过大海的孩子吧，其实还是要谢谢他，因为来之前我是不肯把一下午都浪费在玩水上的，结果来了以后我是那个玩不够的人（好丢脸、好尴尬）。 晚上 21:00 我们才回到酒店，错过了酒店的晚餐时间（好吧好吧，都怪我 -_- 但是我玩的很开心啊～）。想了好久我们决定晚餐去劈柴院美食街，这样我们就又吃饭又玩了一个地儿。 劈柴院在市北区中山路，离酒店并不远（所以才选它，去哪儿都很方便呀）。劈柴院就是小吃一条街，里面有青岛的风味小吃，很有地方特色。吃完了，溜一溜青岛晚上安静的街道，到海岸边感受一下海风，这叫一个滋润～～ 4月30日早上 8:00 我们要完成最后的行程。在白天去栈桥上走一走、看一看，栈桥上的人就没少过。走上栈桥两边就是海，有许多海带被冲上来挂在礁石上，海水清澈见底。岸上还有在挖寄居蟹的人，我也凑凑热闹，可是我害怕被夹，不敢下手。小螃蟹好可爱的，支着两个小钳子，跑的贼快 ^_^ 哈哈哈～～～ 上午 10:30 去吃最后一顿青岛美味。因为火车是中午的，所以我们只好提前吃饭。我发现青岛当地又一好评无数的店——三合园海鲜水饺。他家比较出名的就是鲅鱼馅饺子和扇贝陷饺子，扇贝饺子里是有整块扇贝肉的，料足，而且吃饭时旁边你就可以看到店员在拨扇贝肉。鲅鱼饺子鱼肉细腻、鲜美，我还是第一次吃鲅鱼馅的饺子，也是从次就爱上了。重要的是，吃海鲜馅的饺子要沾酱油，而不是醋，这点还是很重要的！！因为回到北京后吃到的鲅鱼饺子都是沾醋的，很影响海鲜的口感，所以再也没有找到当时的那个味道。我还特意打包了一点儿带回北京，很舍不得吃呢。 中午 12:00 我们急急忙忙的收拾行李赶去火车站。我怎么老急急忙忙的呢？？哎……不就是多看了看风景。匆匆忙忙的在青岛火车站前留了影，就飞奔去检票了。 回来的路上我依旧不能平复内心的感情，也许只是因为第一次踏出家门，来到一个新的城市，感受它独特的文化和魅力。这次旅行开心、感动、疲惫、不舍…都有，就像我开始说的，打开了我向往新世界的大门，我喜欢多玩多看，从次我再也不甘于局限在一个小角落，因为世界很大，很多地方我需要走一走看一看，不然我的世界观都是狭隘的。 我还没有看到青岛的全部，一个城市的历史和文化也不是两三天就可以了解的。当时我就在想，我一定还会再来这个地方，可到现在都还没有机会。","categories":[{"name":"旅行","slug":"旅行","permalink":"http://Lemon23.github.io/categories/旅行/"}],"tags":[{"name":"游记","slug":"游记","permalink":"http://Lemon23.github.io/tags/游记/"}],"keywords":[{"name":"旅行","slug":"旅行","permalink":"http://Lemon23.github.io/categories/旅行/"}]}]}